{
    "name": "Fence Painter",
    "id": "fence-painter",
    "discuss_link": "http://www.fgdsb.com/2015/01/04/fence-painter/",
    "desc": "<p>Write an algorithm that counts the number of ways you can paint a fence with N posts using K colors such that no more than 2 adjacent fence posts are painted with the same color.</p>",
    "difficulty": "Medium",
    "source": "Google",
    "time": "2015-01-28 17:10:23",
    "tags": [],
    "code_cpp": "int num_colors(int n, int k) {\n}",
    "code_java": "public class Solution {\n    public int num_colors(int n, int k) {\n    }\n}",
    "code_ruby": "# @param n, integer k, integer\n# @return integer\ndef num_colors(n, k)\nend",
    "code_python": "# @param n, integer k, integer\n# @return integer\ndef num_colors(n, k):",
    "code_lua": "-- @param n, integer k, integer\n-- @return integer\nfunction num_colors(n, k)\nend",
    "code_scala": "object Solution {\n    def num_colors(n: Int, k: Int):Int = {\n    }\n}",
    "in_type_cpp": [
        "int",
        "int"
    ],
    "ret_type_cpp": "int",
    "out_type_cpp": "int",
    "judge_type_cpp": "equal",
    "in_type_java": [
        "int",
        "int"
    ],
    "ret_type_java": "int",
    "out_type_java": "int",
    "out_type_scala": "Int",
    "judge_type_java": "equal",
    "judge_type_ruby": "equal",
    "judge_type_python": "equal",
    "judge_type_lua": "equal",
    "judge_call": "num_colors(@)"
}