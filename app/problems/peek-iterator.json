{
    "name": "Peek Iterator",
    "id": "peek-iterator",
    "discuss_link": "http://www.fgdsb.com/2015/01/25/peek-iterator/",
    "desc": "<p>\nSuppose you have a <strong>Iterator</strong> class with <code>has_next()</code> and <code>get_next()</code> methods.\n</p>\n<p>\nPlease design and implement a <strong>PeekIterator</strong> class as a wrapper of Iterator and provide a <code>peek()</code> method.\n</p>\n<p>\nWhen calling <code>peek()</code>, the user will only get the current element without moving forward the iterator.\n</p>    \n<br>\n<p><strong>Note:</strong> For Java solution we will use JDK's Iterator class, so the methods would be <code>hasNext()</code> and <code>next()</code>.</p>",
    "difficulty": "Easy",
    "source": "Google",
    "time": "2015-02-16 20:33:00",
    "tags": [
        "Design"
    ],
    "code_cpp": "/*\nclass Iterator {\npublic:\n    int get_next();\n    bool has_next();\n};\n*/\n\nclass PeekIterator {\npublic:\n    PeekIterator(Iterator& it) {\n    }\n    \n    int peek() {\n    }\n    \n    bool has_next() {\n    }\n    \n    int get_next() {\n    }\n};",
    "code_java": "public class PeekIterator {\n    public PeekIterator(Iterator it) {\n    }\n    \n    public int peek() {\n    }\n    \n    public boolean has_next() {\n    }\n    \n    public int get_next() {\n    }\n}",
    "code_ruby": "# class Iterator\n#   def get_next()\n#       ...\n#   end   \n#\n#   def has_next()\n#       ...\n#   end\n# end\n\nclass PeekIterator\n    # @param it: Iterator object\n    def initialize(it)\n    end\n    \n    # @return integer\n    def peek()\n    end\n    \n    # @return boolean\n    def has_next()\n    end\n    \n    # @return integer\n    def get_next()\n    end\nend",
    "code_python": "# class Iterator:\n#   def get_next(self):\n#       ...\n#\n#   def has_next(self):\n#       ...\n\nclass PeekIterator:\n    # @param it: Iterator object\n    def __init__(self, it):\n    \n    # @return integer\n    def peek(self):\n    \n    # @return boolean\n    def has_next(self):\n    \n    # @return integer\n    def get_next(self):",
    "code_lua": "-- Definition for an iterator\n--\n-- Iterator = class()\n-- \n-- function Iterator:has_next()\n-- \t...\n-- end\n-- \n-- function Iterator:get_next()\n-- \t...\n-- end\n\nPeekIterator = class()\n\nfunction PeekIterator:ctor(it)\n\tself.it = it\nend\n\nfunction PeekIterator:peek()\nend\n\nfunction PeekIterator:has_next()\nend\n\nfunction PeekIterator:get_next()\nend\n",
    "in_type_cpp": [
        "vector<int>"
    ],
    "ret_type_cpp": "bool",
    "out_type_cpp": "bool",
    "judge_type_cpp": "equal",
    "in_type_java": [
        "int[]"
    ],
    "ret_type_java": "boolean",
    "out_type_java": "boolean",
    "judge_type_java": "equal",
    "class_name_java": "PeekIterator",
    "judge_type_ruby": "equal",
    "judge_type_python": "equal",
    "judge_type_lua": "equal",
    "judge_call": "function(@)"
}