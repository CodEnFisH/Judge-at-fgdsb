{
    "name": "Compress String",
    "id": "compress-string",
    "discuss_link": "http://www.fgdsb.com/2015/01/03/compress-string/",
    "desc": "<p>Implement a function to perform basic string compression using the counts of repeated characters.<br><br>For example, the string <code>aabcccccaaa</code> would become <code>a2b1c5a3</code>.<br><br>If the compressed string would not become smaller than the original string, you should return the original one.</p>",
    "difficulty": "Easy",
    "source": "Google",
    "time": "2015-01-31 17:05:20",
    "tags": [],
    "code_cpp": "string compress(string& str) {\n}",
    "code_java": "public class Solution {\n    public String compress(String str) {\n    }\n}",
    "code_ruby": "# @param str, String\n# @return String\ndef compress(str)\nend",
    "code_python": "# @param str, string\n# @return string\ndef compress(string):",
    "code_lua": "-- @param str, string\n-- @return string\nfunction compress(str)\nend",
    "in_type_cpp": [
        "string"
    ],
    "ret_type_cpp": "string",
    "out_type_cpp": "string",
    "judge_type_cpp": "equal",
    "in_type_java": [
        "String"
    ],
    "ret_type_java": "String",
    "out_type_java": "String",
    "judge_type_java": "!out[i].equals(answer)",
    "judge_type_ruby": "equal",
    "judge_type_python": "equal",
    "judge_type_lua": "not equals(out[i], answer)",
    "judge_call": "compress(@)"
}